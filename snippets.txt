The chunks of code we cover during the live talks.

Copyright 2017 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

# Android

;an01

        // Set up Firebase
        mDatabase = FirebaseDatabase.getInstance();
        mStorage = FirebaseStorage.getInstance();
        mAuth = FirebaseAuth.getInstance();
;an02

        // Get storage ref, and build metadata
        StorageReference uploadRef = mStorage.getReference().child("uploads");
        final DatabaseReference dbRef = mDatabase.getReference("uploads").push();

        StorageReference uploadFile = uploadRef.child(dbRef.getKey() + ".amr");

        StorageMetadata uploadMetadata = new StorageMetadata.Builder()
            .setContentType("audio/amr")
            .build();


;an03

        // Upload the file, and handle failure
        uploadFile.putFile(Uri.fromFile(mRecording), uploadMetadata)
            .addOnFailureListener(new OnFailureListener() {
            public void onFailure(@NonNull Exception e) {
                toast("Failed to upload audio :(");
            }})


;an04

            // Handle success
            .addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
            public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
                toast("Uploaded!");

                Recording recording = new Recording(mRecording.getName(), mLangCode,
                    taskSnapshot.getDownloadUrl().toString(),
                    taskSnapshot.getStorage().getPath().substring(1),
                    taskSnapshot.getTotalByteCount());

                dbRef.setValue(recording);
            }
        });

;an05

        // Set up FirebaseUI
        if (mAuth.getCurrentUser() == null) {
            // not logged in

            finish();
        } else {
            // logged in.  Time to listen for new translations.
            listenForTranslations();
        }


;an06

            // Fire up the Firebase-UI Auth activity
            startActivityForResult(
                    AuthUI.getInstance()
                            .createSignInIntentBuilder()
                            .setProviders(Arrays.asList(
                                    new AuthUI.IdpConfig.Builder(AuthUI.EMAIL_PROVIDER).build(),
                                    new AuthUI.IdpConfig.Builder(AuthUI.GOOGLE_PROVIDER).build()))
                            .build(),
                    RC_SIGN_IN);


;an07

        // Get a reference to translations
        DatabaseReference translationsRef = mDatabase.getReference().child("translations");


;an08

        // Listen to last child added
        translationsRef.limitToLast(1).addChildEventListener(new ChildEventListener() {
            public void onChildAdded(DataSnapshot dataSnapshot, String s) {
                mCurKey = dataSnapshot.getKey();
                listenForLanguage(mCurKey, mShortLangCode);
            }

            public void onChildChanged(DataSnapshot dataSnapshot, String s) { }
            public void onChildRemoved(DataSnapshot dataSnapshot) { }
            public void onChildMoved(DataSnapshot dataSnapshot, String s) { }
            public void onCancelled(DatabaseError databaseError) { }
        });


;an09

            DatabaseReference langRef = mDatabase.getReference().child("translations")
                .child(translationKey).child(languageCode).child("text");

            // don't leak listeners :)
            if (mCurrentLanguageListener != null) {
                langRef.removeEventListener(mCurrentLanguageListener);
            }


;an10

            mCurrentLanguageListener = langRef.addValueEventListener(new ValueEventListener() {
                public void onDataChange(DataSnapshot dataSnapshot) {
                    String translation = dataSnapshot.getValue(String.class);
                    updateAndPlay(translation, languageCode);
                }

                public void onCancelled(DatabaseError databaseError) { }
            });


# iOS

;zni1

        // Set up Firebase
        self.storage = FIRStorage.storage()
        self.auth = FIRAuth.auth()
        self.database = FIRDatabase.database()

;zni2

        // find local file
        let file = documentsDirectory().appendingPathComponent(fileName)

        // Get storage reference and build metadata
        let uploadRef = self.storage.reference().child("uploads")
        let dbRef = self.database.reference().child("uploads").childByAutoId()
        let uploadFile = uploadRef.child(dbRef.key)
        let metadata = FIRStorageMetadata()
        metadata.contentType = "LINEAR16"

;zni3

        // Upload the file
        uploadFile.putFile(file, metadata: metadata) { (metadata, error) in
            // handle failure
            if (error != nil) {
                self.toast(message: "Failed to upload audio: \(error)")
            } else {
                self.toast(message: "Uploaded!")
            }
        }

;zni4

                let dict = [
                    "encoding": "LINEAR16",
                    "sampleRate": 16000,
                    "language": (self.languageDict[self.selectedLanguage]?["locale"])! as String,
                    "fullPath": "uploads/\(dbRef.key)"
                ] as [String : Any]
                dbRef.setValue(dict, withCompletionBlock: { (error, ref) in
                    if (error != nil) {
                        self.toast(message: "Failed to write to the database: \(error)")
                    }
                })

;zni5

        // Set up FirebaseUI
        self.authUI = FUIAuth.defaultAuthUI()
        self.authUI?.delegate = self
        self.authUI?.providers = [
            FUIGoogleAuth()
        ]

;zni6

        if (self.auth.currentUser == nil) {
            // No current user, so show a sign in view
            self.navigationItem.rightBarButtonItem?.title = "Log in"
            let authViewController = self.authUI?.authViewController()
            self.present(authViewController!, animated: true, completion: nil)
        } else {
            self.navigationItem.rightBarButtonItem?.title = "Log out"
            listenForTranslations()
        }

;zni7

        // Get a reference to translations
        let translationsRef = self.database.reference().child("translations")

;zni8

        // Listen to last child added
        translationsRef.queryLimited(toLast: 1).observe(.childAdded, with: { (snapshot) in
            self.listenForLanguage(translationRef: snapshot.ref, languageCode: self.selectedLanguage)
        })

;zni9

        // Wait for our language to appear
        let languageRef = translationRef.child(languageCode)
        languageRef.observe(.value, with: { (snapshot) in
            if (snapshot.value != nil) {
                guard let data = snapshot.value as? [String: String] else { print("failure"); return }
                // Play the translation through the local text-to-speech
                let translation = data["text"]
                self.updateAndPlay(text: translation!)
            }
        })



# Cloud Functions

;cf01

// When a node is written under /uploads, run this function
exports.onUpload = functions.database
    .ref("/uploads/{uploadId}")
    .onWrite((event) => {
    });

;cf02

// Get metadata about the audio file from the database node
let data = event.data.val();
let language = data.language ? data.language : "en";
let sampleRate = data.sampleRate ? data.sampleRate : 16000;
let encoding = data.encoding == "FLAC" ? Encoding.FLAC : Encoding.AMR;

;cf03

// Send the file to the Cloud Speech API to get the transcript
let request = {
    config: {
        languageCode: language,
        sampleRateHertz: sampleRate,
        encoding: encoding
    },
    audio: {uri: `gs://mimming-babelfire.appspot.com/${data.fullPath}`}
};

return speech.recognize(request)

;cf04

.then((response) => {
    // Write the resulting transcript to the database (in a different node)
    let transcript = response[0].results[0].alternatives[0].transcript;
    return event.data.adminRef.root
        .child("transcripts").child(event.params.uploadId)
        .set({text: transcript, language: language});
});

;cf05

// When a node is written under /transcripts, run this function
exports.onTranscript = functions.database
.ref("/transcripts/{transcriptId}")
.onWrite((event) => {

});


;cf06

// Get the text we need to translate and the language it is in
let value = event.data.val();
let transcriptId = event.params.transcriptId;
let text = value.text ? value.text : value;
// More supported languages: https://cloud.google.com/translate/docs/languages
let languages = ["en", "es", "pt", "de", "ja", "hi", "nl", "fr", "pl"];

;cf07

// More supported languages: https://cloud.google.com/translate/docs/languages
let languages = ["en", "es", "pt", "de", "ja", "hi", "nl", "fr", "pl"];
let from = value.language ? getLanguageWithoutLocale(value.language) : "en";
let promises = languages.map(to => {
    console.log(`translating from '${from}' to '${to}', text '${text}'`);
    if (from !== to) {
        // Call the Google Cloud Platform Translate API
        return translate.translate(text, {
            from: from,
            to: to
        })



    } else {
        // Skip API call if same langauge
        return event.data.adminRef.root
            .child("translations").child(transcriptId).child(to)
            .set({text: text, language: from});
    }
});
return Promise.all(promises);

;cf08

.then(result => {
    // Write the translation to the database
    return event.data.adminRef.root
        .child("translations").child(transcriptId).child(to)
        .set({text: result[0], language: to});
});
